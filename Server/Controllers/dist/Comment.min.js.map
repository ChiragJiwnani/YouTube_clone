{"version":3,"sources":["Comment.js"],"names":["_comment","_interopRequireDefault","require","_mongoose","postcomment","req","res","commentdata","regeneratorRuntime","async","_context","prev","next","body","Comment","awrap","save","status","json","t0","message","abrupt","stop","getcomment","commentlist","_context2","find","sent","send","deletecomment","_id","_context3","mongoose","Types","ObjectId","isValid","findByIdAndDelete","editcomment","commentbody","updatecomment","_context4","params","id","findByIdAndUpdate","$set","likeComment","userId","comment","updatedComment","_context5","console","log","findById","likedBy","includes","filter","likes","push","dislikedBy","dislikes","error","dislikeComment","_context6"],"mappings":"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","file":"Comment.min.js","sourcesContent":["import Comment from \"../Models/comment.js\";\nimport mongoose from \"mongoose\";\n\nexport const postcomment = async (req, res) => {\n  const commentdata = req.body;\n  const postcomment = new Comment(commentdata);\n  try {\n    await postcomment.save();\n    res.status(200).json(\"posted the comment\");\n  } catch (error) {\n    res.status(400).json(error.message);\n    return;\n  }\n};\n\nexport const getcomment = async (req, res) => {\n  try {\n    const commentlist = await Comment.find();\n    res.status(200).send(commentlist);\n  } catch (error) {\n    res.status(400).json(error.message);\n    return;\n  }\n};\n\nexport const deletecomment = async (req, res) => {\n  const { id: _id } = req.params;\n  if (!mongoose.Types.ObjectId.isValid(_id)) {\n    return res.status(400).send(\"Comments unavailable..\");\n  }\n  try {\n    await Comment.findByIdAndDelete(_id);\n    res.status(200).json({ message: \"deleted comment\" });\n  } catch (error) {\n    res.status(400).json(error.message);\n    return;\n  }\n};\n\nexport const editcomment = async (req, res) => {\n  const { id: _id } = req.params;\n  const { commentbody } = req.body;\n  if (!mongoose.Types.ObjectId.isValid(_id)) {\n    return res.status(400).send(\"Comments unavailable..\");\n  }\n  try {\n    const updatecomment = await Comment.findByIdAndUpdate(_id, {\n      $set: { commentbody: commentbody },\n    });\n    res.status(200).json(updatecomment);\n  } catch (error) {\n    res.status(400).json(error.message);\n    return;\n  }\n};\n\nexport const likeComment = async (req, res) => {\n  const { id: _id } = req.params;\n  const { userId } = req.body;\n\n  console.log(\"likeCommentController:\", _id, { userId });\n\n  if (!mongoose.Types.ObjectId.isValid(_id)) {\n    return res.status(404).send(\"Invalid comment ID\");\n  }\n\n  try {\n    const comment = await Comment.findById(_id);\n\n    if (!comment) {\n      return res.status(404).send(\"Comment not found\");\n    }\n\n    // Toggle like\n    if (comment.likedBy.includes(userId)) {\n      comment.likedBy = comment.likedBy.filter((id) => id !== userId);\n      comment.likes -= 1;\n    } else {\n      comment.likedBy.push(userId);\n      comment.likes += 1;\n\n      // Remove dislike if present\n      if (comment.dislikedBy.includes(userId)) {\n        comment.dislikedBy = comment.dislikedBy.filter((id) => id !== userId);\n        comment.dislikes -= 1;\n      }\n    }\n    \n\n    const updatedComment = await comment.save();\n    res.status(200).json(updatedComment);\n  } catch (error) {\n    console.error(\"Error liking comment:\", error);\n    res.status(500).json({ message: \"Server error\", error: error.message });\n  }\n};\n\nexport const dislikeComment = async (req, res) => {\n  const { id: _id } = req.params;\n  const { userId } = req.body;\n\n  console.log(\"dislikeCommentController:\", _id, { userId });\n\n  if (!mongoose.Types.ObjectId.isValid(_id)) {\n    return res.status(404).send(\"Invalid comment ID\");\n  }\n\n  try {\n    const comment = await Comment.findById(_id);\n\n    if (!comment) {\n      return res.status(404).send(\"Comment not found\");\n    }\n\n    // Toggle dislike\n    if (comment.dislikedBy.includes(userId)) {\n      comment.dislikedBy = comment.dislikedBy.filter((id) => id !== userId);\n      comment.dislikes -= 1;\n    } else {\n      comment.dislikedBy.push(userId);\n      comment.dislikes += 1;\n\n      // Remove like if present\n      if (comment.likedBy.includes(userId)) {\n        comment.likedBy = comment.likedBy.filter((id) => id !== userId);\n        comment.likes -= 1;\n      }\n    }\n\n    // Remove the comment if it has 2 dislikes\n    if (comment.dislikes >= 2) {\n      await Comment.findByIdAndDelete(_id); // Delete the comment from the database\n      return res.status(200).json({ message: \"Comment removed after 2 likes\" });\n    }\n\n    const updatedComment = await comment.save();\n    res.status(200).json(updatedComment);\n  } catch (error) {\n    console.error(\"Error disliking comment:\", error);\n    res.status(500).json({ message: \"Server error\", error: error.message });\n  }\n};"]}