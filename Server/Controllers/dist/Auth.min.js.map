{"version":3,"sources":["Auth.js"],"names":["_jsonwebtoken","_interopRequireDefault","require","_Auth","login","req","res","email","existingUser","newUser","token","_token","regeneratorRuntime","async","_context","prev","next","body","console","log","awrap","users","findOne","sent","create","jwt","sign","id","_id","process","env","JWT_SECRET","status","json","result","t0","mess","abrupt","expiresIn","t1","stop"],"mappings":"yFAAA,IAAAA,cAAAC,uBAAAC,QAAA,iBACAC,MAAAF,uBAAAC,QAAA,8FAIO,IAAME,MAAQ,SAAOC,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OACXT,EAAUF,EAAIY,KAAdV,MANVW,QAAAC,IAAAZ,GAKqBO,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAQ,MAJrBC,MAAAA,QAAAC,QAAA,CAAAf,MAAAA,KAIqB,KAAA,EAAA,GAJrBC,EAIqBM,EAAAS,KAKjBL,QAAQC,IAAIX,GACPA,EANY,CAAAM,EAAAE,KAAA,GAAA,MAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAAAJ,mBAAAQ,MAAAC,MAAAA,QAAAG,OAAA,CAAAjB,MAAAA,KAAA,KAAA,GAAAE,EAAAK,EAAAS,KAAAb,EAAAe,cAAAA,QAAAC,KAUX,CAVWnB,MAAAE,EAAAF,MAAAoB,GAAAlB,EAAAmB,KAAAC,QAAAC,IAAAC,WACXxB,CAAAA,UAAcU,OADHX,EAAA0B,OAAA,KAAAC,KAAA,CAAAC,OAAAzB,EAAAC,MAAAA,IAAAI,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAF,EAAAC,KAAA,GAAAD,EAAAqB,GAAArB,EAAA,MAAA,GAAAR,EAAA0B,OAAA,KAAAC,KAAA,CAAAG,KAAA,6BAAAtB,EAAAuB,OAAA,UAAA,KAAA,GAAAvB,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAN,EAAAe,cAAAA,QAAAC,KAIXlB,CACNU,MAAOV,EAAKA,MAqBNmB,GAAInB,EAAaoB,KA1BNC,QAAAC,IAAAC,WAAA,CAAAO,UAAA,OA+BfhC,EAAI0B,OAAO,KAAKC,KAAK,CAAEC,OAAQ1B,EAAcE,MAAAA,IA/B9B,KAAA,GAAAI,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAF,EAAAC,KAAA,GAAAD,EAAAyB,GAAAzB,EAAA,MAAA,GAAAR,EAAA0B,OAAA,KAAAC,KAAA,CAAAG,KAAA,6BAAAtB,EAAAuB,OAAA,UAAA,KAAA,GAAA,IAAA,MAAA,OAAAvB,EAAA0B,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,IAAA,CAAA,EAAA","file":"Auth.min.js","sourcesContent":["import jwt from \"jsonwebtoken\";\nimport users from \"../Models/Auth.js\";\n\n\n\nexport const login = async (req, res) => {\n  const { email } = req.body;\n  console.log(email);\n  try {\n    const existingUser = await users.findOne({ email });\n    console.log(existingUser)\n    if (!existingUser) {\n      try {\n        const newUser = await users.create({ email });\n        const token = jwt.sign(\n          {\n            email: newUser.email,\n            id: newUser._id,\n          },\n          process.env.JWT_SECRET,\n          { expiresIn: \"1h\" }\n        );\n        res.status(200).json({ result: newUser, token });\n      } catch (error) {\n        res.status(500).json({ mess: \"something went wrong....\" });\n        return\n      }\n    } else {\n      const token = jwt.sign(\n        {\n          email: existingUser.email,\n          id: existingUser._id,\n        },\n        process.env.JWT_SECRET,\n        { expiresIn: \"1h\" }\n      );\n      res.status(200).json({ result: existingUser, token });\n    }\n  } catch (error) {\n    res.status(500).json({mess:'something went wrong....'})\n    return\n  }\n};\n"]}