{"version":3,"sources":["points.js"],"names":["pointsController","req","res","_id","params","id","viewer","body","console","log","mongoose","Types","ObjectId","isValid","status","send","users","findById","user","viewedVideos","some","videoId","equals","findByIdAndUpdate","$addToSet","updatedUser","newUser","json","error","message"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEO,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAClBC,UAAAA,GADkB,GACVF,GAAG,CAACG,MADM,CACtBC,EADsB;AAEtBC,UAAAA,MAFsB,GAEXL,GAAG,CAACM,IAFO,CAEtBD,MAFsB,EAED;;AAC7BE,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BR,GAAG,CAACG,MAAnC,EAH8B,CAGc;;AAC5CI,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BR,GAAG,CAACM,IAAjC,EAJ8B,CAIU;;AAJV,cAMzBG,qBAASC,KAAT,CAAeC,QAAf,CAAwBC,OAAxB,CAAgCV,GAAhC,CANyB;AAAA;AAAA;AAAA;;AAAA,2CAOrBD,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,qBAArB,CAPqB;;AAAA;AAAA;AAAA;AAAA,0CAcTC,iBAAMC,QAAN,CAAeX,MAAf,CAdS;;AAAA;AActBY,UAAAA,IAdsB;;AAAA,cAevBA,IAfuB;AAAA;AAAA;AAAA;;AAAA,2CAgBnBhB,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gBAArB,CAhBmB;;AAAA;AAAA,cAoBvBG,IAAI,CAACC,YAAL,CAAkBC,IAAlB,CAAuB,UAACC,OAAD;AAAA,mBAAaA,OAAO,CAACC,MAAR,CAAenB,GAAf,CAAb;AAAA,WAAvB,CApBuB;AAAA;AAAA;AAAA;;AAAA;AAAA,0CAsBNa,iBAAMO,iBAAN,CAAwBjB,MAAxB,EAAgC;AAClDkB,YAAAA,SAAS,EAAE;AAAEL,cAAAA,YAAY,EAAEhB;AAAhB;AADuC,WAAhC,CAtBM;;AAAA;AAsB1BsB,UAAAA,WAtB0B;AAAA;AAAA,0CAyBVT,iBAAMC,QAAN,CAAeX,MAAf,CAzBU;;AAAA;AAyB1BoB,UAAAA,OAzB0B;AAAA;AAAA;;AAAA;AA2B1BA,UAAAA,OAAO,GAAGR,IAAV;;AA3B0B;AA8B5BhB,UAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBa,IAAhB,CAAqBD,OAArB;AA9B4B;AAAA;;AAAA;AAAA;AAAA;AAgC5BxB,UAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBa,IAAhB,CAAqB;AAAEC,YAAAA,KAAK,EAAE,YAAMC;AAAf,WAArB;;AAhC4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB","sourcesContent":["import mongoose from \"mongoose\";\r\nimport users from \"../Models/Auth.js\";\r\nimport history from \"../Models/history.js\";\r\n\r\nexport const pointsController = async (req, res) => {\r\n  const { id: _id } = req.params;\r\n  const { viewer } = req.body; // Assume the Viewer ID is passed in the request body\r\n  console.log(\"Request Params:\", req.params); // Check video ID\r\n  console.log(\"Request Body:\", req.body); // Check viewer ID\r\n\r\n  if (!mongoose.Types.ObjectId.isValid(_id)) {\r\n    return res.status(404).send(\"Video Unavailable..\");\r\n  }\r\n\r\n  try {\r\n    let updatedUser;\r\n    let newUser;\r\n    // Find the user and update their viewed videos list\r\n    const user = await users.findById(viewer);\r\n    if (!user) {\r\n      return res.status(404).send(\"User not found\");\r\n    }\r\n\r\n    // Check if the video ID is already in the user's list of viewed videos\r\n    if (!user.viewedVideos.some((videoId) => videoId.equals(_id))) {\r\n      // Update the user's viewed videos list\r\n      updatedUser = await users.findByIdAndUpdate(viewer, {\r\n        $addToSet: { viewedVideos: _id },\r\n      });\r\n      newUser = await users.findById(viewer);\r\n    } else {\r\n      newUser = user;\r\n    }\r\n\r\n    res.status(200).json(newUser);\r\n  } catch (error) {\r\n    res.status(400).json({ error: error.message });\r\n  }\r\n};\r\n"],"file":"points.dev.js"}