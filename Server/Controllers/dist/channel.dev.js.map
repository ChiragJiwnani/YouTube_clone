{"version":3,"sources":["channel.js"],"names":["updatechaneldata","req","res","_id","params","id","body","name","desc","mongoose","Types","ObjectId","isValid","status","send","users","findByIdAndUpdate","$set","updatedata","json","message","getallchanels","find","allchanels","allchaneldata","forEach","channel","push","email"],"mappings":";;;;;;;AAAA;;AACA;;;;AACO,IAAMA,gBAAgB,GAAC,SAAjBA,gBAAiB,CAAMC,GAAN,EAAUC,GAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAChBC,UAAAA,GADgB,GACXF,GAAG,CAACG,MADO,CACnBC,EADmB;AAAA,sBAERJ,GAAG,CAACK,IAFI,EAEnBC,IAFmB,aAEnBA,IAFmB,EAEdC,IAFc,aAEdA,IAFc;;AAAA,cAGtBC,qBAASC,KAAT,CAAeC,QAAf,CAAwBC,OAAxB,CAAgCT,GAAhC,CAHsB;AAAA;AAAA;AAAA;;AAAA,2CAIfD,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uBAArB,CAJe;;AAAA;AAAA;AAAA;AAAA,0CAOCC,iBAAMC,iBAAN,CACnBb,GADmB,EACf;AACAc,YAAAA,IAAI,EAAC;AACDV,cAAAA,IAAI,EAACA,IADJ;AAEDC,cAAAA,IAAI,EAACA;AAFJ;AADL,WADe,EAOnB;AAAC,mBAAI;AAAL,WAPmB,CAPD;;AAAA;AAOhBU,UAAAA,UAPgB;AAgBtBhB,UAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqBD,UAArB;AAhBsB;AAAA;;AAAA;AAAA;AAAA;AAkBtBhB,UAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAC,YAAMA;AAAf,WAArB;AAlBsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;;;AAuBA,IAAMC,aAAa,GAAC,SAAdA,aAAc,CAAMpB,GAAN,EAAUC,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEIa,iBAAMO,IAAN,EAFJ;;AAAA;AAEbC,UAAAA,UAFa;AAGbC,UAAAA,aAHa,GAGC,EAHD;AAInBD,UAAAA,UAAU,CAACE,OAAX,CAAmB,UAACC,OAAD,EAAW;AAC1BF,YAAAA,aAAa,CAACG,IAAd,CAAmB;AACfxB,cAAAA,GAAG,EAACuB,OAAO,CAACvB,GADG;AAEfI,cAAAA,IAAI,EAACmB,OAAO,CAACnB,IAFE;AAGfqB,cAAAA,KAAK,EAACF,OAAO,CAACE,KAHC;AAIfpB,cAAAA,IAAI,EAACkB,OAAO,CAAClB;AAJE,aAAnB;AAMH,WAPD;AAQAN,UAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqBK,aAArB;AAZmB;AAAA;;AAAA;AAAA;AAAA;AAcnBtB,UAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAC,aAAMA;AAAf,WAArB;AAdmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB","sourcesContent":["import mongoose from \"mongoose\";\nimport users from \"../Models/Auth.js\"\nexport const updatechaneldata=async(req,res)=>{\n    const {id:_id}=req.params;\n    const {name,desc}=req.body;\n    if(!mongoose.Types.ObjectId.isValid(_id)){\n        return res.status(404).send(\"Channel unavailable..\")\n    }\n    try {\n        const updatedata=await users.findByIdAndUpdate(\n            _id,{\n                $set:{\n                    name:name,\n                    desc:desc,\n                },\n            },\n            {new:true}\n        );\n        res.status(200).json(updatedata)\n    } catch (error) {\n        res.status(405).json({message:error.message})\n        return\n    }\n}\n\nexport const getallchanels=async(req,res)=>{\n    try {\n        const allchanels=await users.find();\n        const allchaneldata=[]\n        allchanels.forEach((channel)=>{\n            allchaneldata.push({\n                _id:channel._id,\n                name:channel.name,\n                email:channel.email,\n                desc:channel.desc\n            });\n        });\n        res.status(200).json(allchaneldata)\n    } catch (error) {\n        res.status(405).json({message:error.message})\n        return\n    }\n}\n"],"file":"channel.dev.js"}