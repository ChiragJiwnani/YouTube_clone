{"version":3,"sources":["video.js"],"names":["_videofile","_interopRequireDefault","require","uploadvideo","req","res","file","regeneratorRuntime","async","_context","prev","next","includes","mimetype","status","json","message","abrupt","videofile","filename","originalname","filepath","path","filetype","filesize","size","videochanel","body","chanel","trim","uploader","awrap","save","send","t0","mongoose","Error","ValidationError","name","code","stop"],"mappings":"oHAAA,IAAAA,WAAAC,uBAAAC,QAAA,mGAGO,IAAMC,YAAc,SAAOC,EAAKC,GAAZ,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAClBP,EAAIE,MAAS,CAAC,aAAaM,SAASR,EAAIE,KAAKO,UAD3B,CAAAJ,EAAAE,KAAA,EAAA,MAAA,OAEnBN,EAAIS,OAAO,KAAKC,KAAK,CAAEC,QAAS,0CAFbP,EAAAQ,OAAA,UAAA,KAAA,EAAA,OAAAR,EAAAC,KAAA,EAObJ,EAAO,IAAIY,WAAAA,QAAU,CAPtBf,WAAcC,EAAdD,KAAAA,MAAqBC,QAAP,WAAAe,SAAAf,EAAAE,KAAAc,aAAAC,SAAAjB,EAAAE,KAAAgB,KAAAC,SAAAnB,EAAAE,KAAAO,SAAAW,SAAApB,EAAAE,KAAAmB,KAAAC,YAAAtB,EAAAuB,KAAAC,OAAAC,QAAA,kBAAAC,SACdxB,EAALqB,KAAeG,SAAAD,QAAajB,cADTH,EAAAE,KAAA,EAAAJ,mBAAAwB,MAAAzB,EAAA0B,QAAA,KAAA,EAkBnB3B,EAAIS,OAAO,KAAKmB,KAAK,8BAlBFxB,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAyB,GAAAzB,EAAA,MAAA,GAEIO,EAAAA,cAASmB,SAAAC,MAAAC,gBAAhChC,EAAAS,OAAA,KAAAC,KAAA,CAAAC,QAAA,+BAFmB,eAAAP,EAAAyB,GAAAI,MAAA,OAAA7B,EAAAyB,GAAAK,KAuBflC,EAAIS,OAAO,KAAKC,KAAK,CAAEC,QAAS,yBAvBjBX,EAAAS,OAAA,KAAAC,KAAA,CAAAC,QAAA,kCAAA,KAAA,GAAA,IAAA,MAAA,OAAAP,EAAA+B,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,uCAWfjB,IAAAA,aAAcjB,SAAKO,EAJIR,GAITC,IAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAEEY,WAAAA,QAAMU,QAFRtB,KAAAA,EAEdoB,EAFcpB,EAAAA,KAGdwB,EAAAA,OAAAA,KAAU1B,KAAIuB,GAHArB,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAXCD,EAAAS,OAAA,KAAAC,KAAA,CAAAC,QAAA,+BAWDV,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA","file":"video.min.js","sourcesContent":["import videofile from \"../Models/videofile.js\";\n\n\nexport const uploadvideo = async (req, res) => {\n    if (!req.file || !['video/mp4'].includes(req.file.mimetype)) {\n        res.status(400).json({ message: \"Please upload a .mp4 video file only.\" });\n        return;\n    }\n\n    try {\n        const file = new videofile({\n            videotitle: req.body.title.trim() || 'Untitled',\n            filename: req.file.originalname,\n            filepath: req.file.path,\n            filetype: req.file.mimetype,\n            filesize: req.file.size,\n            videochanel: req.body.chanel.trim() || 'Default Channel',\n            uploader: req.body.uploader.trim() || 'Anonymous',\n        });\n\n        await file.save();\n        res.status(201).send(\"File uploaded successfully\");\n    } catch (error) {\n        if (error instanceof mongoose.Error.ValidationError) {\n            res.status(400).json({ message: \"Validation error occurred.\" });\n        } else if (error.name === 'MongoError' && error.code === 11000) {\n            res.status(409).json({ message: \"Duplicate key error.\" });\n        } else {\n            res.status(500).json({ message: \"An unexpected error occurred.\" });\n        }\n    }\n};\n\nexport const getallvideos = async (req, res) => {\n    try {\n        const files = await videofile.find();\n        res.status(200).send(files);\n    } catch (error) {\n        res.status(500).json({ message: \"Failed to retrieve videos.\" });\n    }\n};\n"]}