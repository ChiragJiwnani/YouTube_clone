{"version":3,"sources":["points.js"],"names":["_mongoose","_interopRequireDefault","require","_Auth","_history","pointsController","req","res","_id","viewer","newUser","user","regeneratorRuntime","async","_context","prev","next","params","id","body","console","log","mongoose","Types","ObjectId","isValid","abrupt","status","send","awrap","users","findById","sent","viewedVideos","some","videoId","equals","findByIdAndUpdate","json","t0","error","message","stop"],"mappings":"oGAAA,IAAAA,UAAAC,uBAAAC,QAAA,aACAC,MAAAF,uBAAAC,QAAA,sBACAE,SAAAH,uBAAAC,QAAA,iGAEO,IAAMG,iBAAmB,SAAOC,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAClBR,EAAQF,EAAIW,OAAhBC,GACAT,EAAWH,EAAIa,KAAfV,OANVW,QAAAC,IAAA,kBAAAf,EAAAW,QAQEG,QAAQC,IAAI,gBAAiBf,EAAIa,MAE5BG,UAAAA,QAASC,MAAMC,SAASC,QAAQjB,GANP,CAAAM,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAY,OAAA,SAFhCnB,EAAAoB,OAAA,KAAAC,KAAA,wBAEgC,KAAA,EAAA,OAAAd,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAiB,MAAAC,MAAAA,QAAAC,SAAAtB,IAAA,KAAA,EAAA,GAAAE,EAAAG,EAAAkB,KAAA,CAAAlB,EAAAE,KAAA,GAAA,MAAA,OAAAF,EAAAY,OAAA,SAAAnB,EAAAoB,OAAA,KAAAC,KAAA,mBAAA,KAAA,GAAA,GAoBvBjB,EAAKsB,aAAaC,KAAK,SAACC,GAAD,OAAaA,EAAQC,OAAO5B,KApB5B,CAAAM,EAAAE,KAAA,GAAA,MAAA,OAAAF,EAAAE,KAAA,GAAAJ,mBAAAiB,MAsBNC,MAAAA,QAAMO,kBAAkB5B,EAAQ,CAlBxDW,UAAQC,CAARY,aAAYzB,MAJkB,KAAA,GAAA,OAAAM,EAAAkB,KAAAlB,EAAAE,KAAA,GAAAJ,mBAAAiB,MAMzBP,MAAAA,QAAAA,SAASC,IANgB,KAAA,GAAAb,EAAAI,EAAAkB,KAAAlB,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAN,EAAAC,EAAA,KAAA,GAAAJ,EAAAoB,OAAA,KAAAW,KAAA5B,GAAAI,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAyB,GAAAzB,EAAA,MAAA,GAAAP,EAAAoB,OAAA,KAAAW,KAAA,CAAAE,MAAA1B,EAAAyB,GAAAE,UAAA,KAAA,GAAA,IAAA,MAAA,OAAA3B,EAAA4B,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"points.min.js","sourcesContent":["import mongoose from \"mongoose\";\r\nimport users from \"../Models/Auth.js\";\r\nimport history from \"../Models/history.js\";\r\n\r\nexport const pointsController = async (req, res) => {\r\n  const { id: _id } = req.params;\r\n  const { viewer } = req.body; // Assume the Viewer ID is passed in the request body\r\n  console.log(\"Request Params:\", req.params); // Check video ID\r\n  console.log(\"Request Body:\", req.body); // Check viewer ID\r\n\r\n  if (!mongoose.Types.ObjectId.isValid(_id)) {\r\n    return res.status(404).send(\"Video Unavailable..\");\r\n  }\r\n\r\n  try {\r\n    let updatedUser;\r\n    let newUser;\r\n    // Find the user and update their viewed videos list\r\n    const user = await users.findById(viewer);\r\n    if (!user) {\r\n      return res.status(404).send(\"User not found\");\r\n    }\r\n\r\n    // Check if the video ID is already in the user's list of viewed videos\r\n    if (!user.viewedVideos.some((videoId) => videoId.equals(_id))) {\r\n      // Update the user's viewed videos list\r\n      updatedUser = await users.findByIdAndUpdate(viewer, {\r\n        $addToSet: { viewedVideos: _id },\r\n      });\r\n      newUser = await users.findById(viewer);\r\n    } else {\r\n      newUser = user;\r\n    }\r\n\r\n    res.status(200).json(newUser);\r\n  } catch (error) {\r\n    res.status(400).json({ error: error.message });\r\n  }\r\n};\r\n"]}