{"version":3,"sources":["video.js"],"names":["uploadvideo","req","res","file","includes","mimetype","status","json","message","videofile","videotitle","body","title","trim","filename","originalname","filepath","path","filetype","filesize","size","videochanel","chanel","uploader","save","send","mongoose","Error","ValidationError","name","code","getallvideos","find","files"],"mappings":";;;;;;;AAAA;;;;AAGO,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACnB,CAACD,GAAG,CAACE,IAAL,IAAa,CAAC,CAAC,WAAD,EAAcC,QAAd,CAAuBH,GAAG,CAACE,IAAJ,CAASE,QAAhC,CADK;AAAA;AAAA;AAAA;;AAEnBH,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB;AAFmB;;AAAA;AAAA;AAObL,UAAAA,IAPa,GAON,IAAIM,qBAAJ,CAAc;AACvBC,YAAAA,UAAU,EAAET,GAAG,CAACU,IAAJ,CAASC,KAAT,CAAeC,IAAf,MAAyB,UADd;AAEvBC,YAAAA,QAAQ,EAAEb,GAAG,CAACE,IAAJ,CAASY,YAFI;AAGvBC,YAAAA,QAAQ,EAAEf,GAAG,CAACE,IAAJ,CAASc,IAHI;AAIvBC,YAAAA,QAAQ,EAAEjB,GAAG,CAACE,IAAJ,CAASE,QAJI;AAKvBc,YAAAA,QAAQ,EAAElB,GAAG,CAACE,IAAJ,CAASiB,IALI;AAMvBC,YAAAA,WAAW,EAAEpB,GAAG,CAACU,IAAJ,CAASW,MAAT,CAAgBT,IAAhB,MAA0B,iBANhB;AAOvBU,YAAAA,QAAQ,EAAEtB,GAAG,CAACU,IAAJ,CAASY,QAAT,CAAkBV,IAAlB,MAA4B;AAPf,WAAd,CAPM;AAAA;AAAA,0CAiBbV,IAAI,CAACqB,IAAL,EAjBa;;AAAA;AAkBnBtB,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBmB,IAAhB,CAAqB,4BAArB;AAlBmB;AAAA;;AAAA;AAAA;AAAA;;AAoBnB,cAAI,uBAAiBC,QAAQ,CAACC,KAAT,CAAeC,eAApC,EAAqD;AACjD1B,YAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB;AACH,WAFD,MAEO,IAAI,YAAMqB,IAAN,KAAe,YAAf,IAA+B,YAAMC,IAAN,KAAe,KAAlD,EAAyD;AAC5D5B,YAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB;AACH,WAFM,MAEA;AACHN,YAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB;AACH;;AA1BkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;;;;AA8BA,IAAMuB,YAAY,GAAG,SAAfA,YAAe,CAAO9B,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEAO,sBAAUuB,IAAV,EAFA;;AAAA;AAEdC,UAAAA,KAFc;AAGpB/B,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBmB,IAAhB,CAAqBQ,KAArB;AAHoB;AAAA;;AAAA;AAAA;AAAA;AAKpB/B,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB;;AALoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB","sourcesContent":["import videofile from \"../Models/videofile.js\";\n\n\nexport const uploadvideo = async (req, res) => {\n    if (!req.file || !['video/mp4'].includes(req.file.mimetype)) {\n        res.status(400).json({ message: \"Please upload a .mp4 video file only.\" });\n        return;\n    }\n\n    try {\n        const file = new videofile({\n            videotitle: req.body.title.trim() || 'Untitled',\n            filename: req.file.originalname,\n            filepath: req.file.path,\n            filetype: req.file.mimetype,\n            filesize: req.file.size,\n            videochanel: req.body.chanel.trim() || 'Default Channel',\n            uploader: req.body.uploader.trim() || 'Anonymous',\n        });\n\n        await file.save();\n        res.status(201).send(\"File uploaded successfully\");\n    } catch (error) {\n        if (error instanceof mongoose.Error.ValidationError) {\n            res.status(400).json({ message: \"Validation error occurred.\" });\n        } else if (error.name === 'MongoError' && error.code === 11000) {\n            res.status(409).json({ message: \"Duplicate key error.\" });\n        } else {\n            res.status(500).json({ message: \"An unexpected error occurred.\" });\n        }\n    }\n};\n\nexport const getallvideos = async (req, res) => {\n    try {\n        const files = await videofile.find();\n        res.status(200).send(files);\n    } catch (error) {\n        res.status(500).json({ message: \"Failed to retrieve videos.\" });\n    }\n};\n"],"file":"video.dev.js"}