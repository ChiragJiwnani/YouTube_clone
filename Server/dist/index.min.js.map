{"version":3,"sources":["index.js"],"names":["_express","_interopRequireDefault","require","_mongoose","_dotenv","_cors","_bodyParser","_video","_User","_chat","_path","_comment","_chat2","_crypto","_http","_socket","_socket2","_child_process","ENCRYPTION_KEY","process","env","IV_LENGTH","encryptMessage","message","iv","crypto","randomBytes","cipher","createCipheriv","Buffer","from","encrypted","update","toString","decryptMessage","encryptedMessage","_encryptedMessage$spl2","_slicedToArray","split","ivHex","encryptedText","decipher","createDecipheriv","decrypted","dotenv","config","path","app","use","origin","allowedHeaders","credentials","limit","extended","express","urlencoded","join","get","req","res","videoroutes","commentroutes","chatRoutes","httpServer","createServer","PORT","server","Server","cors","methods","on","log","socket","id","_ref","roomId","userId","userroutes","newMessage","decryptedMessage","to","emit","post","_req$body","src","tgt","command","regeneratorRuntime","async","_context2","prev","next","body","concat","exec","error","console","json","JSON","parse","stdout","stop","_context3","Chat","DB_URL","mongoose","connect","useNewUrlParser","useUnifiedTopology","then","io","listen"],"mappings":"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","file":"index.min.js","sourcesContent":["// server/index.js\r\n\r\nimport express from \"express\";\r\nimport mongoose from \"mongoose\";\r\nimport dotenv from \"dotenv\";\r\nimport cors from \"cors\";\r\nimport bodyParser from \"body-parser\";\r\nimport videoroutes from \"./Routes/video.js\";\r\nimport userroutes from \"./Routes/User.js\";\r\nimport chatRoutes from \"./Routes/chat.js\";\r\nimport path from \"path\";\r\nimport commentroutes from \"./Routes/comment.js\";\r\nimport Chat from \"./Models/chat.js\"; // Import the chat model\r\nimport crypto from \"crypto\"; // Encryption library\r\nimport { createServer } from \"http\"; // To create an HTTP server\r\nimport socketServer from \"./socket.js\";\r\nimport { Server } from \"socket.io\"; // Import socket.io\r\nimport { exec } from \"child_process\";\r\n\r\nconst ENCRYPTION_KEY =\r\n  process.env.ENCRYPTION_KEY || \"abcdefghijklmnopqrstuvwxzy012345\"; // Must be 32 characters for aes-256\r\nconst IV_LENGTH = 16; // For AES, the IV length should be 16 bytes\r\n\r\n// Encrypt the message\r\nconst encryptMessage = (message) => {\r\n  const iv = crypto.randomBytes(IV_LENGTH);\r\n  const cipher = crypto.createCipheriv(\r\n    \"aes-256-ctr\",\r\n    Buffer.from(ENCRYPTION_KEY),\r\n    iv\r\n  );\r\n  let encrypted = cipher.update(message, \"utf8\", \"hex\");\r\n  encrypted += cipher.final(\"hex\");\r\n  return iv.toString(\"hex\") + \":\" + encrypted;\r\n};\r\n\r\n// Decrypt the message\r\nconst decryptMessage = (encryptedMessage) => {\r\n  const [ivHex, encryptedText] = encryptedMessage.split(\":\"); // Separate the IV from the message\r\n  const iv = Buffer.from(ivHex, \"hex\");\r\n  const decipher = crypto.createDecipheriv(\r\n    \"aes-256-ctr\",\r\n    Buffer.from(ENCRYPTION_KEY),\r\n    iv\r\n  );\r\n  let decrypted = decipher.update(encryptedText, \"hex\", \"utf8\");\r\n  decrypted += decipher.final(\"utf8\");\r\n  return decrypted;\r\n};\r\n\r\n// Environment Variables\r\ndotenv.config({ path: \"./.env\" });\r\n\r\n// Express App Initialization\r\nconst app = express();\r\nconst server = createServer(app);\r\nsocketServer(server);\r\n\r\napp.use(cors({\r\n    origin: [\"https://chirags-youtube-clone.netlify.app\", \"http://localhost:3000\"], // Allow requests from this origin\r\n    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],\r\n    allowedHeaders: ['Content-Type', 'Authorization'],// Specify allowed HTTP methods\r\n    credentials: true // Include credentials if needed\r\n}));\r\napp.use(express.json({ limit: \"30mb\", extended: true }));\r\napp.use(express.urlencoded({ limit: \"30mb\", extended: true }));\r\napp.use(\"/uploads\", express.static(path.join(\"uploads\")));\r\n\r\napp.get(\"/\", (req, res) => {\r\n  res.send(\"Your tube is working\");\r\n});\r\n\r\napp.use(bodyParser.json());\r\napp.use(\"/user\", userroutes);\r\napp.use(\"/video\", videoroutes);\r\napp.use(\"/comment\", commentroutes);\r\napp.use(\"/chat\", chatRoutes);\r\n\r\n// Initialize HTTP Server\r\nconst httpServer = createServer(app);\r\nconst PORT = process.env.PORT;\r\n\r\n// Initialize Socket.io\r\nconst io = new Server(httpServer, {\r\n  cors: {\r\n    origin: [\"https://chirags-youtube-clone.netlify.app\", \"http://localhost:3000\"],// Your frontend's URL\r\n    // origin: [\"http://localhost:3000\"],// Your frontend's URL\r\n    methods: [\"POST\", \"GET\", \"PATCH\"],\r\n    credentials: true,\r\n    optionSuccessStatus: 200,// Set up the correct CORS for frontend access\r\n  },\r\n});\r\n\r\n// Socket.io chat logic\r\nio.on(\"connection\", (socket) => {\r\n  console.log(\"a user connected:\", socket.id);\r\n\r\n  socket.on(\"joinRoom\", ({ roomId, userId }) => {\r\n    socket.join(roomId);\r\n    console.log(`${userId} joined room ${roomId}`);\r\n  });\r\n\r\n  socket.on(\"chatMessage\", async ({ roomId, userId, message }) => {\r\n    console.log(\r\n      `Message received from ${userId} in room ${roomId}: ${message}`\r\n    );\r\n\r\n    const encryptedMessage = encryptMessage(message);\r\n    const newMessage = new Chat({ roomId, userId, message: encryptedMessage });\r\n\r\n    await newMessage.save(); // Save to database\r\n\r\n    // Decrypt message before emitting to clients\r\n    const decryptedMessage = decryptMessage(encryptedMessage);\r\n\r\n    // Emit the decrypted message to the room\r\n    io.to(roomId).emit(\"message\", { userId, message: decryptedMessage });\r\n    console.log(`Message broadcasted to room: ${roomId}`);\r\n  });\r\n\r\n  socket.on(\"disconnect\", () => {\r\n    console.log(\"user disconnected\");\r\n  });\r\n});\r\n\r\n// Proxy translation request to OpenNMT server\r\napp.post(\"/translate\", async (req, res) => {\r\n  const { src, tgt } = req.body;\r\n  // const command = `curl -X POST http://localhost:5000/translate -H \"Content-Type: application/json\" -d '{\"src\": \"${src}\", \"tgt\": \"${tgt}\"}'`;\r\n  const command = `curl -X POST https://youtubeclone-server.vercel.app/translate -H \"Content-Type: application/json\" -d '{\"src\": \"${src}\", \"tgt\": \"${tgt}\"}'`;\r\n\r\n  exec(command, (error, stdout) => {\r\n    if (error) {\r\n      res.status(500).json({ error: \"Translation failed.\" });\r\n    } else {\r\n      res.json(JSON.parse(stdout));\r\n    }\r\n  });\r\n});\r\n\r\napp.post(\"/api/send-email-otp\", async (req, res) => {\r\n  // your email OTP sending logic\r\n});\r\n\r\napp.post(\"/api/send-mobile-otp\", async (req, res) => {\r\n  // your mobile OTP sending logic\r\n});\r\n\r\n// MongoDB Connection and Server Listener\r\nconst DB_URL = process.env.DB_URL;\r\nmongoose\r\n  .connect(DB_URL, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n    // serverSelectionTimeoutMS: 5000, // Timeout if the database is unreachable\r\n  })\r\n  .then(() => {\r\n    console.log(\"Mongodb Database connected\");\r\n  })\r\n  .catch((error) => {\r\n    console.log(error);\r\n  });\r\n\r\n// Start both HTTP and Socket.io servers\r\nhttpServer.listen(PORT, () => {\r\n  console.log(`Server running on Port ${PORT}`);\r\n});\r\n"]}