{"version":3,"sources":["index.js"],"names":["_express","_interopRequireDefault","require","_mongoose","_dotenv","_cors","_bodyParser","_video","_User","_chat","_path","_comment","_chat2","_crypto","_http","_socket","_socket2","_child_process","ENCRYPTION_KEY","process","env","IV_LENGTH","encryptMessage","message","iv","crypto","randomBytes","cipher","createCipheriv","Buffer","from","encrypted","update","toString","decryptMessage","encryptedMessage","_encryptedMessage$spl2","_slicedToArray","split","ivHex","encryptedText","decipher","createDecipheriv","decrypted","dotenv","config","path","app","use","express","json","limit","extended","get","req","res","bodyParser","userroutes","commentroutes","chatRoutes","httpServer","createServer","PORT","io","Server","cors","origin","methods","server","socket","console","log","id","on","_ref","roomId","userId","join","concat","send","_ref2","newMessage","decryptedMessage","regeneratorRuntime","async","_context","prev","next","awrap","save","to","emit","stop","_req$body","src","tgt","command","_context2","error","stdout","JSON","parse","_context3","_context4","DB_URL","mongoose","connect","then","listen"],"mappings":"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","file":"index.min.js","sourcesContent":["//index.js\n\nimport express from \"express\";\nimport mongoose from \"mongoose\";\nimport dotenv from \"dotenv\";\nimport cors from \"cors\";\nimport bodyParser from \"body-parser\";\nimport videoroutes from \"./Routes/video.js\";\nimport userroutes from \"./Routes/User.js\";\nimport chatRoutes from \"./Routes/chat.js\";\nimport path from \"path\";\nimport commentroutes from \"./Routes/comment.js\";\nimport Chat from \"./Models/chat.js\"; // Import the chat model\nimport crypto from \"crypto\"; // Encryption library\nimport { createServer } from \"http\"; // To create an HTTP server\nimport socketServer from \"./socket.js\";\nimport { Server } from \"socket.io\"; // Import socket.io\nimport { exec } from \"child_process\";\n\nconst ENCRYPTION_KEY =\n  process.env.ENCRYPTION_KEY || \"abcdefghijklmnopqrstuvwxzy012345\"; // Must be 32 characters for aes-256\nconst IV_LENGTH = 16; // For AES, the IV length should be 16 bytes\n\n// Encrypt the message\nconst encryptMessage = (message) => {\n  const iv = crypto.randomBytes(IV_LENGTH);\n  const cipher = crypto.createCipheriv(\n    \"aes-256-ctr\",\n    Buffer.from(ENCRYPTION_KEY),\n    iv\n  );\n  let encrypted = cipher.update(message, \"utf8\", \"hex\");\n  encrypted += cipher.final(\"hex\");\n  return iv.toString(\"hex\") + \":\" + encrypted;\n};\n\n// Decrypt the message\nconst decryptMessage = (encryptedMessage) => {\n  const [ivHex, encryptedText] = encryptedMessage.split(\":\"); // Separate the IV from the message\n  const iv = Buffer.from(ivHex, \"hex\");\n  const decipher = crypto.createDecipheriv(\n    \"aes-256-ctr\",\n    Buffer.from(ENCRYPTION_KEY),\n    iv\n  );\n  let decrypted = decipher.update(encryptedText, \"hex\", \"utf8\");\n  decrypted += decipher.final(\"utf8\");\n  return decrypted;\n};\n\n// Environment Variables\ndotenv.config({ path: \"./.env\" });\n\n// Express App Initialization\nconst app = express();\nconst server = createServer(app);\nsocketServer(server);\n\napp.use(cors());\napp.use(express.json({ limit: \"30mb\", extended: true }));\napp.use(express.urlencoded({ limit: \"30mb\", extended: true }));\napp.use(\"/uploads\", express.static(path.join(\"uploads\")));\n\napp.get(\"/\", (req, res) => {\n  res.send(\"Your tube is working\");\n});\n\napp.use(bodyParser.json());\napp.use(\"/user\", userroutes);\napp.use(\"/video\", videoroutes);\napp.use(\"/comment\", commentroutes);\napp.use(\"/chat\", chatRoutes);\n\n// Initialize HTTP Server\nconst httpServer = createServer(app);\nconst PORT = process.env.PORT;\n\n// Initialize Socket.io\nconst io = new Server(httpServer, {\n  cors: {\n    origin: \"http://localhost:3000\", // Your frontend's URL\n    methods: [\"POST\", \"GET\", \"PATCH\"],\n    credentials: false,\n    optionSuccessStatus: 200, // Set up the correct CORS for frontend access\n  },\n});\n\n// Socket.io chat logic\nio.on(\"connection\", (socket) => {\n  console.log(\"a user connected:\", socket.id);\n\n  socket.on(\"joinRoom\", ({ roomId, userId }) => {\n    socket.join(roomId);\n    console.log(`${userId} joined room ${roomId}`);\n  });\n\n  socket.on(\"chatMessage\", async ({ roomId, userId, message }) => {\n    console.log(\n      `Message received from ${userId} in room ${roomId}: ${message}`\n    );\n\n    const encryptedMessage = encryptMessage(message);\n    const newMessage = new Chat({ roomId, userId, message: encryptedMessage });\n\n    await newMessage.save(); // Save to database\n\n    // Decrypt message before emitting to clients\n    const decryptedMessage = decryptMessage(encryptedMessage);\n\n    // Emit the decrypted message to the room\n    io.to(roomId).emit(\"message\", { userId, message: decryptedMessage });\n    console.log(`Message broadcasted to room: ${roomId}`);\n  });\n\n  socket.on(\"disconnect\", () => {\n    console.log(\"user disconnected\");\n  });\n});\n\n// Proxy translation request to OpenNMT server\napp.post(\"/translate\", async (req, res) => {\n  const { src, tgt } = req.body;\n  const command = `curl -X POST https://youtube-clone-3ge8.onrender.com/translate -H \"Content-Type: application/json\" -d '{\"src\": \"${src}\", \"tgt\": \"${tgt}\"}'`;\n\n  exec(command, (error, stdout) => {\n    if (error) {\n      res.status(500).json({ error: \"Translation failed.\" });\n    } else {\n      res.json(JSON.parse(stdout));\n    }\n  });\n});\n\napp.post(\"/api/send-email-otp\", async (req, res) => {\n  // your email OTP sending logic\n});\n\napp.post(\"/api/send-mobile-otp\", async (req, res) => {\n  // your mobile OTP sending logic\n});\n\n// MongoDB Connection and Server Listener\nconst DB_URL = process.env.DB_URL;\nmongoose\n  .connect(DB_URL)\n  .then(() => {\n    console.log(\"Mongodb Database connected\");\n  })\n  .catch((error) => {\n    console.log(error);\n  });\n\n// Start both HTTP and Socket.io servers\nhttpServer.listen(PORT, () => {\n  console.log(`Server running on Port ${PORT}`);\n});\n"]}