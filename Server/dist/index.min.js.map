{"version":3,"sources":["index.js"],"names":["_express","_interopRequireDefault","require","_mongoose","_dotenv","_cors","_bodyParser","_video","_User","_chat","_path","_comment","_chat2","_crypto","_http","_socket","_socket2","_child_process","ENCRYPTION_KEY","process","env","IV_LENGTH","encryptMessage","message","iv","crypto","randomBytes","cipher","createCipheriv","Buffer","from","encrypted","update","toString","decryptMessage","encryptedMessage","_encryptedMessage$spl2","_slicedToArray","split","ivHex","encryptedText","decipher","createDecipheriv","decrypted","dotenv","config","path","app","use","express","json","limit","extended","get","req","res","bodyParser","userroutes","commentroutes","chatRoutes","httpServer","createServer","PORT","io","Server","cors","origin","server","optionSuccessStatus","on","socket","urlencoded","id","_ref","roomId","userId","join","log","_ref2","newMessage","decryptedMessage","regeneratorRuntime","async","_context","prev","next","Chat","awrap","to","emit","methods","stop","console","_req$body","src","tgt","command","_context2","concat","exec","error","stdout","status","JSON","parse","DB_URL","mongoose","connect","useUnifiedTopology","listen"],"mappings":"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","file":"index.min.js","sourcesContent":["// server/index.js\r\n\r\nimport express from \"express\";\r\nimport mongoose from \"mongoose\";\r\nimport dotenv from \"dotenv\";\r\nimport cors from \"cors\";\r\nimport bodyParser from \"body-parser\";\r\nimport videoroutes from \"./Routes/video.js\";\r\nimport userroutes from \"./Routes/User.js\";\r\nimport chatRoutes from \"./Routes/chat.js\";\r\nimport path from \"path\";\r\nimport commentroutes from \"./Routes/comment.js\";\r\nimport Chat from \"./Models/chat.js\"; // Import the chat model\r\nimport crypto from \"crypto\"; // Encryption library\r\nimport { createServer } from \"http\"; // To create an HTTP server\r\nimport socketServer from \"./socket.js\";\r\nimport { Server } from \"socket.io\"; // Import socket.io\r\nimport { exec } from \"child_process\";\r\n\r\nconst ENCRYPTION_KEY =\r\n  process.env.ENCRYPTION_KEY || \"abcdefghijklmnopqrstuvwxzy012345\"; // Must be 32 characters for aes-256\r\nconst IV_LENGTH = 16; // For AES, the IV length should be 16 bytes\r\n\r\n// Encrypt the message\r\nconst encryptMessage = (message) => {\r\n  const iv = crypto.randomBytes(IV_LENGTH);\r\n  const cipher = crypto.createCipheriv(\r\n    \"aes-256-ctr\",\r\n    Buffer.from(ENCRYPTION_KEY),\r\n    iv\r\n  );\r\n  let encrypted = cipher.update(message, \"utf8\", \"hex\");\r\n  encrypted += cipher.final(\"hex\");\r\n  return iv.toString(\"hex\") + \":\" + encrypted;\r\n};\r\n\r\n// Decrypt the message\r\nconst decryptMessage = (encryptedMessage) => {\r\n  const [ivHex, encryptedText] = encryptedMessage.split(\":\"); // Separate the IV from the message\r\n  const iv = Buffer.from(ivHex, \"hex\");\r\n  const decipher = crypto.createDecipheriv(\r\n    \"aes-256-ctr\",\r\n    Buffer.from(ENCRYPTION_KEY),\r\n    iv\r\n  );\r\n  let decrypted = decipher.update(encryptedText, \"hex\", \"utf8\");\r\n  decrypted += decipher.final(\"utf8\");\r\n  return decrypted;\r\n};\r\n\r\n// Environment Variables\r\ndotenv.config({ path: \"./.env\" });\r\n\r\n// Express App Initialization\r\nconst app = express();\r\nconst server = createServer(app);\r\nsocketServer(server);\r\n\r\napp.use(cors());\r\napp.use(express.json({ limit: \"30mb\", extended: true }));\r\napp.use(express.urlencoded({ limit: \"30mb\", extended: true }));\r\napp.use(\"/uploads\", express.static(path.join(\"uploads\")));\r\n\r\napp.get(\"/\", (req, res) => {\r\n  res.send(\"Your tube is working\");\r\n});\r\n\r\napp.use(bodyParser.json());\r\napp.use(\"/user\", userroutes);\r\napp.use(\"/video\", videoroutes);\r\napp.use(\"/comment\", commentroutes);\r\napp.use(\"/chat\", chatRoutes);\r\n\r\n// Initialize HTTP Server\r\nconst httpServer = createServer(app);\r\nconst PORT = process.env.PORT;\r\n\r\n// Initialize Socket.io\r\nconst io = new Server(httpServer, {\r\n  cors: {\r\n    // origin: [\"https://chirags-youtube-clone.netlify.app\",\"http://localhost:3000\", \"https://chirags-youtube-clone.vercel.app\"],// Your frontend's URL\r\n    origin: [\"http://localhost:3000\"],// Your frontend's URL\r\n    methods: [\"POST\", \"GET\", \"PATCH\"],\r\n    credentials: true,\r\n    optionSuccessStatus: 200, // Set up the correct CORS for frontend access\r\n  },\r\n});\r\n\r\n// Socket.io chat logic\r\nio.on(\"connection\", (socket) => {\r\n  console.log(\"a user connected:\", socket.id);\r\n\r\n  socket.on(\"joinRoom\", ({ roomId, userId }) => {\r\n    socket.join(roomId);\r\n    console.log(`${userId} joined room ${roomId}`);\r\n  });\r\n\r\n  socket.on(\"chatMessage\", async ({ roomId, userId, message }) => {\r\n    console.log(\r\n      `Message received from ${userId} in room ${roomId}: ${message}`\r\n    );\r\n\r\n    const encryptedMessage = encryptMessage(message);\r\n    const newMessage = new Chat({ roomId, userId, message: encryptedMessage });\r\n\r\n    await newMessage.save(); // Save to database\r\n\r\n    // Decrypt message before emitting to clients\r\n    const decryptedMessage = decryptMessage(encryptedMessage);\r\n\r\n    // Emit the decrypted message to the room\r\n    io.to(roomId).emit(\"message\", { userId, message: decryptedMessage });\r\n    console.log(`Message broadcasted to room: ${roomId}`);\r\n  });\r\n\r\n  socket.on(\"disconnect\", () => {\r\n    console.log(\"user disconnected\");\r\n  });\r\n});\r\n\r\n// Proxy translation request to OpenNMT server\r\napp.post(\"/translate\", async (req, res) => {\r\n  const { src, tgt } = req.body;\r\n  const command = `curl -X POST http://localhost:5000/translate -H \"Content-Type: application/json\" -d '{\"src\": \"${src}\", \"tgt\": \"${tgt}\"}'`;\r\n  // const command = `curl -X POST https://youtubeclone-server.vercel.app/translate -H \"Content-Type: application/json\" -d '{\"src\": \"${src}\", \"tgt\": \"${tgt}\"}'`;\r\n\r\n  exec(command, (error, stdout) => {\r\n    if (error) {\r\n      res.status(500).json({ error: \"Translation failed.\" });\r\n    } else {\r\n      res.json(JSON.parse(stdout));\r\n    }\r\n  });\r\n});\r\n\r\napp.post(\"/api/send-email-otp\", async (req, res) => {\r\n  // your email OTP sending logic\r\n});\r\n\r\napp.post(\"/api/send-mobile-otp\", async (req, res) => {\r\n  // your mobile OTP sending logic\r\n});\r\n\r\n// MongoDB Connection and Server Listener\r\nconst DB_URL = process.env.DB_URL;\r\nmongoose\r\n  .connect(DB_URL, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n    // serverSelectionTimeoutMS: 5000, // Timeout if the database is unreachable\r\n  })\r\n  .then(() => {\r\n    console.log(\"Mongodb Database connected\");\r\n  })\r\n  .catch((error) => {\r\n    console.log(error);\r\n  });\r\n\r\n// Start both HTTP and Socket.io servers\r\nhttpServer.listen(PORT, () => {\r\n  console.log(`Server running on Port ${PORT}`);\r\n});\r\n"]}