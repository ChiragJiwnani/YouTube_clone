{"version":3,"sources":["socket.js"],"names":["socketServer","server","io","Server","cors","origin","methods","on","socket","console","log","id","emit","data","to","userToCall","signal","signalData","from"],"mappings":";;;;;;;AAAA;;AAEA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAAY;AAC/B,MAAMC,EAAE,GAAG,IAAIC,cAAJ,CAAWF,MAAX,EAAmB;AAC5BG,IAAAA,IAAI,EAAE;AACJC,MAAAA,MAAM,EAAE,uBADJ;AAEJC,MAAAA,OAAO,EAAE,CAAC,KAAD,EAAQ,MAAR;AAFL;AADsB,GAAnB,CAAX;AAOAJ,EAAAA,EAAE,CAACK,EAAH,CAAM,YAAN,EAAoB,UAACC,MAAD,EAAY;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCF,MAAM,CAACG,EAA7C;AAEAH,IAAAA,MAAM,CAACI,IAAP,CAAY,QAAZ,EAAsBJ,MAAM,CAACG,EAA7B;AAEAH,IAAAA,MAAM,CAACD,EAAP,CAAU,UAAV,EAAsB,UAACM,IAAD,EAAU;AAC9BX,MAAAA,EAAE,CAACY,EAAH,CAAMD,IAAI,CAACE,UAAX,EAAuBH,IAAvB,CAA4B,KAA5B,EAAmC;AACjCI,QAAAA,MAAM,EAAEH,IAAI,CAACI,UADoB;AAEjCC,QAAAA,IAAI,EAAEL,IAAI,CAACK;AAFsB,OAAnC;AAID,KALD;AAOAV,IAAAA,MAAM,CAACD,EAAP,CAAU,YAAV,EAAwB,UAACM,IAAD,EAAU;AAChCX,MAAAA,EAAE,CAACY,EAAH,CAAMD,IAAI,CAACC,EAAX,EAAeF,IAAf,CAAoB,cAApB,EAAoCC,IAAI,CAACG,MAAzC;AACD,KAFD,EAZ8B,CAe9B;;AACAR,IAAAA,MAAM,CAACD,EAAP,CAAU,SAAV,EAAqB,UAACM,IAAD,EAAU;AAC7BX,MAAAA,EAAE,CAACY,EAAH,CAAMD,IAAI,CAACC,EAAX,EAAeF,IAAf,CAAoB,WAApB;AACD,KAFD;AAGAJ,IAAAA,MAAM,CAACD,EAAP,CAAU,YAAV,EAAwB,YAAM;AAC5BE,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD,KAFD;AAGD,GAtBD;AAuBD,CA/BD;;eAiCeV,Y","sourcesContent":["import { Server } from \"socket.io\";\r\n\r\nconst socketServer = (server) => {\r\n  const io = new Server(server, {\r\n    cors: {\r\n      origin: \"http://localhost:3000\",\r\n      methods: [\"GET\", \"POST\"],\r\n    },\r\n  });\r\n\r\n  io.on(\"connection\", (socket) => {\r\n    console.log(\"New client connected: \", socket.id);\r\n\r\n    socket.emit(\"yourID\", socket.id);\r\n\r\n    socket.on(\"callUser\", (data) => {\r\n      io.to(data.userToCall).emit(\"hey\", {\r\n        signal: data.signalData,\r\n        from: data.from,\r\n      });\r\n    });\r\n\r\n    socket.on(\"acceptCall\", (data) => {\r\n      io.to(data.to).emit(\"callAccepted\", data.signal);\r\n    });\r\n    // Added this to handle endCall event\r\n    socket.on(\"endCall\", (data) => {\r\n      io.to(data.to).emit(\"callEnded\");\r\n    });\r\n    socket.on(\"disconnect\", () => {\r\n      console.log(\"Client disconnected\");\r\n    });\r\n  });\r\n};\r\n\r\nexport default socketServer;\r\n"],"file":"socket.dev.js"}