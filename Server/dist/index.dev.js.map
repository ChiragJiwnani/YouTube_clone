{"version":3,"sources":["index.js"],"names":["ENCRYPTION_KEY","process","env","IV_LENGTH","encryptMessage","message","iv","crypto","randomBytes","cipher","createCipheriv","Buffer","from","encrypted","update","toString","decryptMessage","encryptedMessage","split","ivHex","encryptedText","decipher","createDecipheriv","decrypted","dotenv","config","path","app","server","use","express","json","limit","extended","urlencoded","join","get","req","res","send","bodyParser","userroutes","videoroutes","commentroutes","chatRoutes","httpServer","PORT","io","Server","cors","origin","methods","credentials","optionSuccessStatus","on","socket","console","log","id","roomId","userId","newMessage","Chat","save","decryptedMessage","to","emit","post","body","src","tgt","command","error","stdout","status","JSON","parse","DB_URL","mongoose","connect","then","listen"],"mappings":"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","sourcesContent":["//index.js\n\nimport express from \"express\";\nimport mongoose from \"mongoose\";\nimport dotenv from \"dotenv\";\nimport cors from \"cors\";\nimport bodyParser from \"body-parser\";\nimport videoroutes from \"./Routes/video.js\";\nimport userroutes from \"./Routes/User.js\";\nimport chatRoutes from \"./Routes/chat.js\";\nimport path from \"path\";\nimport commentroutes from \"./Routes/comment.js\";\nimport Chat from \"./Models/chat.js\"; // Import the chat model\nimport crypto from \"crypto\"; // Encryption library\nimport { createServer } from \"http\"; // To create an HTTP server\nimport socketServer from \"./socket.js\";\nimport { Server } from \"socket.io\"; // Import socket.io\nimport { exec } from \"child_process\";\n\nconst ENCRYPTION_KEY =\n  process.env.ENCRYPTION_KEY || \"abcdefghijklmnopqrstuvwxzy012345\"; // Must be 32 characters for aes-256\nconst IV_LENGTH = 16; // For AES, the IV length should be 16 bytes\n\n// Encrypt the message\nconst encryptMessage = (message) => {\n  const iv = crypto.randomBytes(IV_LENGTH);\n  const cipher = crypto.createCipheriv(\n    \"aes-256-ctr\",\n    Buffer.from(ENCRYPTION_KEY),\n    iv\n  );\n  let encrypted = cipher.update(message, \"utf8\", \"hex\");\n  encrypted += cipher.final(\"hex\");\n  return iv.toString(\"hex\") + \":\" + encrypted;\n};\n\n// Decrypt the message\nconst decryptMessage = (encryptedMessage) => {\n  const [ivHex, encryptedText] = encryptedMessage.split(\":\"); // Separate the IV from the message\n  const iv = Buffer.from(ivHex, \"hex\");\n  const decipher = crypto.createDecipheriv(\n    \"aes-256-ctr\",\n    Buffer.from(ENCRYPTION_KEY),\n    iv\n  );\n  let decrypted = decipher.update(encryptedText, \"hex\", \"utf8\");\n  decrypted += decipher.final(\"utf8\");\n  return decrypted;\n};\n\n// Environment Variables\ndotenv.config({ path: \"./.env\" });\n\n// Express App Initialization\nconst app = express();\nconst server = createServer(app);\nsocketServer(server);\n\napp.use(cors());\napp.use(express.json({ limit: \"30mb\", extended: true }));\napp.use(express.urlencoded({ limit: \"30mb\", extended: true }));\napp.use(\"/uploads\", express.static(path.join(\"uploads\")));\n\napp.get(\"/\", (req, res) => {\n  res.send(\"Your tube is working\");\n});\n\napp.use(bodyParser.json());\napp.use(\"/user\", userroutes);\napp.use(\"/video\", videoroutes);\napp.use(\"/comment\", commentroutes);\napp.use(\"/chat\", chatRoutes);\n\n// Initialize HTTP Server\nconst httpServer = createServer(app);\nconst PORT = process.env.PORT;\n\n// Initialize Socket.io\nconst io = new Server(httpServer, {\n  cors: {\n    origin: \"http://localhost:3000\", // Your frontend's URL\n    methods: [\"POST\", \"GET\", \"PATCH\"],\n    credentials: false,\n    optionSuccessStatus: 200, // Set up the correct CORS for frontend access\n  },\n});\n\n// Socket.io chat logic\nio.on(\"connection\", (socket) => {\n  console.log(\"a user connected:\", socket.id);\n\n  socket.on(\"joinRoom\", ({ roomId, userId }) => {\n    socket.join(roomId);\n    console.log(`${userId} joined room ${roomId}`);\n  });\n\n  socket.on(\"chatMessage\", async ({ roomId, userId, message }) => {\n    console.log(\n      `Message received from ${userId} in room ${roomId}: ${message}`\n    );\n\n    const encryptedMessage = encryptMessage(message);\n    const newMessage = new Chat({ roomId, userId, message: encryptedMessage });\n\n    await newMessage.save(); // Save to database\n\n    // Decrypt message before emitting to clients\n    const decryptedMessage = decryptMessage(encryptedMessage);\n\n    // Emit the decrypted message to the room\n    io.to(roomId).emit(\"message\", { userId, message: decryptedMessage });\n    console.log(`Message broadcasted to room: ${roomId}`);\n  });\n\n  socket.on(\"disconnect\", () => {\n    console.log(\"user disconnected\");\n  });\n});\n\n// Proxy translation request to OpenNMT server\napp.post(\"/translate\", async (req, res) => {\n  const { src, tgt } = req.body;\n  const command = `curl -X POST https://youtube-clone-3ge8.onrender.com/translate -H \"Content-Type: application/json\" -d '{\"src\": \"${src}\", \"tgt\": \"${tgt}\"}'`;\n\n  exec(command, (error, stdout) => {\n    if (error) {\n      res.status(500).json({ error: \"Translation failed.\" });\n    } else {\n      res.json(JSON.parse(stdout));\n    }\n  });\n});\n\napp.post(\"/api/send-email-otp\", async (req, res) => {\n  // your email OTP sending logic\n});\n\napp.post(\"/api/send-mobile-otp\", async (req, res) => {\n  // your mobile OTP sending logic\n});\n\n// MongoDB Connection and Server Listener\nconst DB_URL = process.env.DB_URL;\nmongoose\n  .connect(DB_URL)\n  .then(() => {\n    console.log(\"Mongodb Database connected\");\n  })\n  .catch((error) => {\n    console.log(error);\n  });\n\n// Start both HTTP and Socket.io servers\nhttpServer.listen(PORT, () => {\n  console.log(`Server running on Port ${PORT}`);\n});\n"],"file":"index.dev.js"}