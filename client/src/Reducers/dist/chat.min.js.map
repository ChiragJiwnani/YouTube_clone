{"version":3,"sources":["chat.js"],"names":["initialState","messages","chatReducer","state","arguments","length","undefined","action","type","_objectSpread","payload","concat","_toConsumableArray"],"mappings":"uwCAEA,IAAMA,aAAe,CACjBC,SAAU,IAGRC,YAAc,SAAA,EAAA,GAAkC,IAAjCC,EAAiC,EAAAC,UAAAC,aAAAC,IAAlC,EAAA,EAASN,aAAcO,EAAW,EAAAH,UAAAC,OAAlC,OAAkCC,EAClD,OAAQC,EAAOC,MACX,IAAK,yBAED,OAAAC,cAAA,GAAYN,EAAZ,CAAmBF,SAAUM,EAAOG,UACxC,IAAK,cAED,OAAAD,cAAA,GAAYN,EAAZ,CAAmBF,SAAQ,GAAAU,OAAAC,mBAAMT,EAAMF,UAAZ,CAAsBM,EAAOG,YAC5D,QACI,OAAOP,aAIJD","file":"chat.min.js","sourcesContent":["// chatReducer.js\r\n\r\nconst initialState = {\r\n    messages: []  // Initialize with an empty array\r\n};\r\n\r\nconst chatReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_MESSAGES_SUCCESS':\r\n            // console.log('reducer->Updating state with fetched messages:', action.payload);\r\n            return { ...state, messages: action.payload };\r\n        case 'NEW_MESSAGE':\r\n            // console.log('reducer->Adding new message to state:', action.payload);\r\n            return { ...state, messages: [...state.messages, action.payload] }; // Add new message\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default chatReducer;\r\n"]}